"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultMapProps = void 0;
var _reactNative = require("react-native");
const propsToDisplay = ['testID', 'nativeID', 'accessibilityElementsHidden', 'accessibilityViewIsModal', 'importantForAccessibility', 'accessibilityRole', 'accessibilityLabel', 'accessibilityLabelledBy', 'accessibilityHint', 'placeholder', 'value', 'defaultValue', 'title'];

/**
 * Preserve props that are helpful in diagnosing test failures, while stripping rest
 */
const defaultMapProps = props => {
  const result = {};
  const styles = _reactNative.StyleSheet.flatten(props.style);
  if (styles?.display === 'none') {
    result.style = {
      display: 'none'
    };
  }
  const accessibilityState = removeUndefinedKeys(props.accessibilityState);
  if (accessibilityState !== undefined) {
    result.accessibilityState = accessibilityState;
  }
  const accessibilityValue = removeUndefinedKeys(props.accessibilityValue);
  if (accessibilityValue !== undefined) {
    result.accessibilityValue = accessibilityValue;
  }
  propsToDisplay.forEach(propName => {
    if (propName in props) {
      result[propName] = props[propName];
    }
  });
  return result;
};
exports.defaultMapProps = defaultMapProps;
function isObject(value) {
  return typeof value === 'object' && value !== null && !Array.isArray(value);
}
function removeUndefinedKeys(prop) {
  if (!isObject(prop)) {
    return prop;
  }
  const result = {};
  Object.entries(prop).forEach(([key, value]) => {
    if (value !== undefined) {
      result[key] = value;
    }
  });

  // If object does not have any props we will ignore it.
  if (Object.keys(result).length === 0) {
    return undefined;
  }
  return result;
}
//# sourceMappingURL=format-default.js.map