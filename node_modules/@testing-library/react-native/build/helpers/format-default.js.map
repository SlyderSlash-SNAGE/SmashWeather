{"version":3,"file":"format-default.js","names":["_reactNative","require","propsToDisplay","defaultMapProps","props","result","styles","StyleSheet","flatten","style","display","accessibilityState","removeUndefinedKeys","undefined","accessibilityValue","forEach","propName","exports","isObject","value","Array","isArray","prop","Object","entries","key","keys","length"],"sources":["../../src/helpers/format-default.ts"],"sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\nimport { MapPropsFunction } from './format';\n\nconst propsToDisplay = [\n  'testID',\n  'nativeID',\n  'accessibilityElementsHidden',\n  'accessibilityViewIsModal',\n  'importantForAccessibility',\n  'accessibilityRole',\n  'accessibilityLabel',\n  'accessibilityLabelledBy',\n  'accessibilityHint',\n  'placeholder',\n  'value',\n  'defaultValue',\n  'title',\n];\n\n/**\n * Preserve props that are helpful in diagnosing test failures, while stripping rest\n */\nexport const defaultMapProps: MapPropsFunction = (props) => {\n  const result: Record<string, unknown> = {};\n\n  const styles = StyleSheet.flatten(props.style as ViewStyle);\n  if (styles?.display === 'none') {\n    result.style = { display: 'none' };\n  }\n\n  const accessibilityState = removeUndefinedKeys(props.accessibilityState);\n  if (accessibilityState !== undefined) {\n    result.accessibilityState = accessibilityState;\n  }\n\n  const accessibilityValue = removeUndefinedKeys(props.accessibilityValue);\n  if (accessibilityValue !== undefined) {\n    result.accessibilityValue = accessibilityValue;\n  }\n\n  propsToDisplay.forEach((propName) => {\n    if (propName in props) {\n      result[propName] = props[propName];\n    }\n  });\n\n  return result;\n};\n\nfunction isObject(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nfunction removeUndefinedKeys(prop: unknown) {\n  if (!isObject(prop)) {\n    return prop;\n  }\n\n  const result: Record<string, unknown> = {};\n  Object.entries(prop).forEach(([key, value]) => {\n    if (value !== undefined) {\n      result[key] = value;\n    }\n  });\n\n  // If object does not have any props we will ignore it.\n  if (Object.keys(result).length === 0) {\n    return undefined;\n  }\n\n  return result;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAGA,MAAMC,cAAc,GAAG,CACrB,QAAQ,EACR,UAAU,EACV,6BAA6B,EAC7B,0BAA0B,EAC1B,2BAA2B,EAC3B,mBAAmB,EACnB,oBAAoB,EACpB,yBAAyB,EACzB,mBAAmB,EACnB,aAAa,EACb,OAAO,EACP,cAAc,EACd,OAAO,CACR;;AAED;AACA;AACA;AACO,MAAMC,eAAiC,GAAIC,KAAK,IAAK;EAC1D,MAAMC,MAA+B,GAAG,CAAC,CAAC;EAE1C,MAAMC,MAAM,GAAGC,uBAAU,CAACC,OAAO,CAACJ,KAAK,CAACK,KAAK,CAAc;EAC3D,IAAIH,MAAM,EAAEI,OAAO,KAAK,MAAM,EAAE;IAC9BL,MAAM,CAACI,KAAK,GAAG;MAAEC,OAAO,EAAE;IAAO,CAAC;EACpC;EAEA,MAAMC,kBAAkB,GAAGC,mBAAmB,CAACR,KAAK,CAACO,kBAAkB,CAAC;EACxE,IAAIA,kBAAkB,KAAKE,SAAS,EAAE;IACpCR,MAAM,CAACM,kBAAkB,GAAGA,kBAAkB;EAChD;EAEA,MAAMG,kBAAkB,GAAGF,mBAAmB,CAACR,KAAK,CAACU,kBAAkB,CAAC;EACxE,IAAIA,kBAAkB,KAAKD,SAAS,EAAE;IACpCR,MAAM,CAACS,kBAAkB,GAAGA,kBAAkB;EAChD;EAEAZ,cAAc,CAACa,OAAO,CAAEC,QAAQ,IAAK;IACnC,IAAIA,QAAQ,IAAIZ,KAAK,EAAE;MACrBC,MAAM,CAACW,QAAQ,CAAC,GAAGZ,KAAK,CAACY,QAAQ,CAAC;IACpC;EACF,CAAC,CAAC;EAEF,OAAOX,MAAM;AACf,CAAC;AAACY,OAAA,CAAAd,eAAA,GAAAA,eAAA;AAEF,SAASe,QAAQA,CAACC,KAAc,EAAoC;EAClE,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC;AAC7E;AAEA,SAASP,mBAAmBA,CAACU,IAAa,EAAE;EAC1C,IAAI,CAACJ,QAAQ,CAACI,IAAI,CAAC,EAAE;IACnB,OAAOA,IAAI;EACb;EAEA,MAAMjB,MAA+B,GAAG,CAAC,CAAC;EAC1CkB,MAAM,CAACC,OAAO,CAACF,IAAI,CAAC,CAACP,OAAO,CAAC,CAAC,CAACU,GAAG,EAAEN,KAAK,CAAC,KAAK;IAC7C,IAAIA,KAAK,KAAKN,SAAS,EAAE;MACvBR,MAAM,CAACoB,GAAG,CAAC,GAAGN,KAAK;IACrB;EACF,CAAC,CAAC;;EAEF;EACA,IAAII,MAAM,CAACG,IAAI,CAACrB,MAAM,CAAC,CAACsB,MAAM,KAAK,CAAC,EAAE;IACpC,OAAOd,SAAS;EAClB;EAEA,OAAOR,MAAM;AACf"}